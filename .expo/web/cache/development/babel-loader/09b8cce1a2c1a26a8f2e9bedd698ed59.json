{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport bg from \"./assets/bg.jpeg\";\nimport Cell from \"./src/components/Cell\";\nvar emptyMap = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\n\nvar copyArray = function copyArray(original) {\n  console.log(\"ghe\");\n  console.log(original);\n  var copy = original.map(function (arr) {\n    return arr.slice();\n  });\n  console.log(copy);\n  return copy;\n};\n\nexport default function App() {\n  var _useState = useState(emptyMap),\n      _useState2 = _slicedToArray(_useState, 2),\n      map = _useState2[0],\n      setMap = _useState2[1];\n\n  var _useState3 = useState(\"x\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentTurn = _useState4[0],\n      setCurrentTurn = _useState4[1];\n\n  var _useState5 = useState(\"BOT_MEDIUM\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      gameMode = _useState6[0],\n      setGameMode = _useState6[1];\n\n  useEffect(function () {\n    if (currentTurn === \"o\" && gameMode !== \"LOCAL\") {\n      botTurn();\n    }\n  }, [currentTurn, gameMode]);\n  useEffect(function () {\n    var winner = getWinner(map);\n\n    if (winner) {\n      gameWon(winner);\n    } else {\n      checkTieState();\n    }\n  }, [map]);\n\n  var _onPress = function onPress(rowIndex, columnIndex) {\n    if (map[rowIndex][columnIndex] !== \"\") {\n      Alert.alert(\"Position already occupied\");\n      return;\n    }\n\n    setMap(function (existingMap) {\n      var updatedMap = _toConsumableArray(existingMap);\n\n      updatedMap[rowIndex][columnIndex] = currentTurn;\n      return updatedMap;\n    });\n    setCurrentTurn(currentTurn === \"x\" ? \"o\" : \"x\");\n  };\n\n  var getWinner = function getWinner(winnerMap) {\n    for (var i = 0; i < 3; i++) {\n      var isRowXWinning = winnerMap[i].every(function (cell) {\n        return cell === \"x\";\n      });\n      var isRowOWinning = winnerMap[i].every(function (cell) {\n        return cell === \"o\";\n      });\n\n      if (isRowXWinning) {\n        return \"x\";\n      }\n\n      if (isRowOWinning) {\n        return \"o\";\n      }\n    }\n\n    for (var col = 0; col < 3; col++) {\n      var isColumnXWinner = true;\n      var isColumnOWinner = true;\n\n      for (var row = 0; row < 3; row++) {\n        if (winnerMap[row][col] !== \"x\") {\n          isColumnXWinner = false;\n        }\n\n        if (winnerMap[row][col] !== \"o\") {\n          isColumnOWinner = false;\n        }\n      }\n\n      if (isColumnXWinner) {\n        return \"x\";\n      }\n\n      if (isColumnOWinner) {\n        return \"o\";\n      }\n    }\n\n    var isDiagonal1OWinning = true;\n    var isDiagonal1XWinning = true;\n    var isDiagonal2OWinning = true;\n    var isDiagonal2XWinning = true;\n\n    for (var _i = 0; _i < 3; _i++) {\n      if (winnerMap[_i][_i] !== \"o\") {\n        isDiagonal1OWinning = false;\n      }\n\n      if (winnerMap[_i][_i] !== \"x\") {\n        isDiagonal1XWinning = false;\n      }\n\n      if (winnerMap[_i][2 - _i] !== \"o\") {\n        isDiagonal2OWinning = false;\n      }\n\n      if (winnerMap[_i][2 - _i] !== \"x\") {\n        isDiagonal2XWinning = false;\n      }\n    }\n\n    if (isDiagonal1OWinning || isDiagonal2OWinning) {\n      return \"o\";\n    }\n\n    if (isDiagonal1XWinning || isDiagonal2XWinning) {\n      return \"x\";\n    }\n  };\n\n  var checkTieState = function checkTieState() {\n    if (!map.some(function (row) {\n      return row.some(function (cell) {\n        return cell === \"\";\n      });\n    })) {\n      Alert.alert(\"It's a tie.\", \"tie\", [{\n        text: \"Restart\",\n        onPress: resetGame\n      }]);\n    }\n  };\n\n  var gameWon = function gameWon(player) {\n    Alert.alert(\"Congrats!\", \"Player \" + player.toUpperCase() + \" won\", [{\n      text: \"Restart\",\n      onPress: resetGame\n    }]);\n  };\n\n  var resetGame = function resetGame() {\n    setMap([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\n    setCurrentTurn(\"x\");\n  };\n\n  var botTurn = function botTurn() {\n    var possiblePositions = [];\n    map.forEach(function (row, rowIndex) {\n      row.forEach(function (cell, columnIndex) {\n        if (cell === \"\") {\n          possiblePositions.push({\n            row: rowIndex,\n            col: columnIndex\n          });\n        }\n      });\n    });\n    var chosenOption;\n\n    if (gameMode === \"BOT_MEDIUM\") {\n      possiblePositions.forEach(function (possiblePosition) {\n        var mapCopy = copyArray(map);\n        mapCopy[possiblePosition.row][possiblePosition.col] = \"o\";\n        var winner = getWinner(mapCopy);\n\n        if (winner === \"o\") {\n          chosenOption = possiblePosition;\n        }\n      });\n\n      if (!chosenOption) {\n        possiblePositions.forEach(function (possiblePosition) {\n          var mapCopy = copyArray(map);\n          mapCopy[possiblePosition.row][possiblePosition.col] = \"x\";\n          var winner = getWinner(mapCopy);\n\n          if (winner === \"x\") {\n            chosenOption = possiblePosition;\n          }\n        });\n      }\n    }\n\n    if (!chosenOption) {\n      chosenOption = possiblePositions[Math.floor(Math.random() * possiblePositions.length)];\n    }\n\n    if (chosenOption) {\n      _onPress(chosenOption.row, chosenOption.col);\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ImageBackground, {\n    source: bg,\n    style: styles.bg,\n    resizeMode: \"contain\"\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 24,\n      color: \"white\",\n      position: \"absolute\",\n      top: 50\n    }\n  }, \"Current Turn: \", currentTurn.toUpperCase()), React.createElement(View, {\n    style: styles.map\n  }, map.map(function (row, rowIndex) {\n    return React.createElement(View, {\n      key: \"row-\" + rowIndex,\n      style: styles.row\n    }, row.map(function (cell, columnIndex) {\n      return React.createElement(Cell, {\n        key: \"row-\" + rowIndex + \"-col-\" + columnIndex,\n        cell: cell,\n        onPress: function onPress() {\n          return _onPress(rowIndex, columnIndex);\n        }\n      });\n    }));\n  })), React.createElement(View, {\n    style: styles.buttons\n  }, React.createElement(Text, {\n    onPress: function onPress() {\n      return setGameMode(\"LOCAL\");\n    },\n    style: [styles.button, {\n      backgroundColor: gameMode === \"LOCAL\" ? \"#4F5686\" : \"#191F24\"\n    }]\n  }, \"1v1\"), React.createElement(Text, {\n    onPress: function onPress() {\n      return setGameMode(\"BOT_EASY\");\n    },\n    style: [styles.button, {\n      backgroundColor: gameMode === \"BOT_EASY\" ? \"#4F5686\" : \"#191F24\"\n    }]\n  }, \"Easy Bot\"), React.createElement(Text, {\n    onPress: function onPress() {\n      return setGameMode(\"BOT_MEDIUM\");\n    },\n    style: [styles.button, {\n      backgroundColor: gameMode === \"BOT_MEDIUM\" ? \"#4F5686\" : \"#191F24\"\n    }]\n  }, \"Medium Bot\"))), React.createElement(StatusBar, {\n    style: \"auto\"\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#242D34\"\n  },\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: 15\n  },\n  map: {\n    width: \"80%\",\n    aspectRatio: 1\n  },\n  row: {\n    flex: 1,\n    flexDirection: \"row\"\n  },\n  buttons: {\n    position: \"absolute\",\n    bottom: 50,\n    flexDirection: \"row\"\n  },\n  button: {\n    color: \"white\",\n    margin: 10,\n    fontSize: 16,\n    backgroundColor: \"#191F24\",\n    padding: 10,\n    paddingHorizontal: 15\n  }\n});","map":{"version":3,"sources":["C:/Users/SNAART/Desktop/ReactNative/TicTacToe/App.js"],"names":["StatusBar","React","useState","useEffect","bg","Cell","emptyMap","copyArray","original","console","log","copy","map","arr","slice","App","setMap","currentTurn","setCurrentTurn","gameMode","setGameMode","botTurn","winner","getWinner","gameWon","checkTieState","onPress","rowIndex","columnIndex","Alert","alert","existingMap","updatedMap","winnerMap","i","isRowXWinning","every","cell","isRowOWinning","col","isColumnXWinner","isColumnOWinner","row","isDiagonal1OWinning","isDiagonal1XWinning","isDiagonal2OWinning","isDiagonal2XWinning","some","text","resetGame","player","toUpperCase","possiblePositions","forEach","push","chosenOption","possiblePosition","mapCopy","Math","floor","random","length","styles","container","fontSize","color","position","top","buttons","button","backgroundColor","StyleSheet","create","flex","alignItems","justifyContent","width","height","paddingTop","aspectRatio","flexDirection","bottom","margin","padding","paddingHorizontal"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  ImageBackground,\r\n  Pressable,\r\n  Alert,\r\n} from \"react-native\";\r\nimport bg from \"./assets/bg.jpeg\";\r\nimport Cell from \"./src/components/Cell\";\r\n\r\nconst emptyMap = [\r\n  [\"\", \"\", \"\"], // 1st row\r\n  [\"\", \"\", \"\"], // 2nd row\r\n  [\"\", \"\", \"\"], // 3rd row\r\n];\r\n\r\nconst copyArray = (original) => {\r\n  console.log(\"ghe\");\r\n  console.log(original);\r\n  const copy = original.map((arr) => {\r\n    return arr.slice();\r\n  });\r\n  console.log(copy);\r\n  return copy;\r\n};\r\n\r\nexport default function App() {\r\n  const [map, setMap] = useState(emptyMap);\r\n  const [currentTurn, setCurrentTurn] = useState(\"x\");\r\n  const [gameMode, setGameMode] = useState(\"BOT_MEDIUM\"); // LOCAL, BOT_EASY, BOT_MEDIUM;\r\n\r\n  useEffect(() => {\r\n    if (currentTurn === \"o\" && gameMode !== \"LOCAL\") {\r\n      botTurn();\r\n    }\r\n  }, [currentTurn, gameMode]);\r\n\r\n  useEffect(() => {\r\n    const winner = getWinner(map);\r\n    if (winner) {\r\n      gameWon(winner);\r\n    } else {\r\n      checkTieState();\r\n    }\r\n  }, [map]);\r\n\r\n  const onPress = (rowIndex, columnIndex) => {\r\n    if (map[rowIndex][columnIndex] !== \"\") {\r\n      Alert.alert(\"Position already occupied\");\r\n      return;\r\n    }\r\n\r\n    setMap((existingMap) => {\r\n      const updatedMap = [...existingMap];\r\n      updatedMap[rowIndex][columnIndex] = currentTurn;\r\n      return updatedMap;\r\n    });\r\n\r\n    setCurrentTurn(currentTurn === \"x\" ? \"o\" : \"x\");\r\n  };\r\n\r\n  const getWinner = (winnerMap) => {\r\n    // Check rows\r\n    for (let i = 0; i < 3; i++) {\r\n      const isRowXWinning = winnerMap[i].every((cell) => cell === \"x\");\r\n      const isRowOWinning = winnerMap[i].every((cell) => cell === \"o\");\r\n\r\n      if (isRowXWinning) {\r\n        return \"x\";\r\n      }\r\n      if (isRowOWinning) {\r\n        return \"o\";\r\n      }\r\n    }\r\n\r\n    // Check columns\r\n    for (let col = 0; col < 3; col++) {\r\n      let isColumnXWinner = true;\r\n      let isColumnOWinner = true;\r\n\r\n      for (let row = 0; row < 3; row++) {\r\n        if (winnerMap[row][col] !== \"x\") {\r\n          isColumnXWinner = false;\r\n        }\r\n        if (winnerMap[row][col] !== \"o\") {\r\n          isColumnOWinner = false;\r\n        }\r\n      }\r\n\r\n      if (isColumnXWinner) {\r\n        return \"x\";\r\n      }\r\n      if (isColumnOWinner) {\r\n        return \"o\";\r\n      }\r\n    }\r\n\r\n    // check diagonals\r\n    let isDiagonal1OWinning = true;\r\n    let isDiagonal1XWinning = true;\r\n    let isDiagonal2OWinning = true;\r\n    let isDiagonal2XWinning = true;\r\n    for (let i = 0; i < 3; i++) {\r\n      if (winnerMap[i][i] !== \"o\") {\r\n        isDiagonal1OWinning = false;\r\n      }\r\n      if (winnerMap[i][i] !== \"x\") {\r\n        isDiagonal1XWinning = false;\r\n      }\r\n\r\n      if (winnerMap[i][2 - i] !== \"o\") {\r\n        isDiagonal2OWinning = false;\r\n      }\r\n      if (winnerMap[i][2 - i] !== \"x\") {\r\n        isDiagonal2XWinning = false;\r\n      }\r\n    }\r\n\r\n    if (isDiagonal1OWinning || isDiagonal2OWinning) {\r\n      return \"o\";\r\n    }\r\n    if (isDiagonal1XWinning || isDiagonal2XWinning) {\r\n      return \"x\";\r\n    }\r\n  };\r\n\r\n  const checkTieState = () => {\r\n    if (!map.some((row) => row.some((cell) => cell === \"\"))) {\r\n      Alert.alert(`It's a tie.`, `tie`, [\r\n        {\r\n          text: \"Restart\",\r\n          onPress: resetGame,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const gameWon = (player) => {\r\n    Alert.alert(`Congrats!`, `Player ${player.toUpperCase()} won`, [\r\n      {\r\n        text: \"Restart\",\r\n        onPress: resetGame,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setMap([\r\n      [\"\", \"\", \"\"], // 1st row\r\n      [\"\", \"\", \"\"], // 2nd row\r\n      [\"\", \"\", \"\"], // 3rd row\r\n    ]);\r\n    setCurrentTurn(\"x\");\r\n  };\r\n\r\n  const botTurn = () => {\r\n    // collect all possible options\r\n    const possiblePositions = [];\r\n    map.forEach((row, rowIndex) => {\r\n      row.forEach((cell, columnIndex) => {\r\n        if (cell === \"\") {\r\n          possiblePositions.push({ row: rowIndex, col: columnIndex });\r\n        }\r\n      });\r\n    });\r\n\r\n    let chosenOption;\r\n\r\n    if (gameMode === \"BOT_MEDIUM\") {\r\n      // Attack\r\n      possiblePositions.forEach((possiblePosition) => {\r\n        const mapCopy = copyArray(map);\r\n\r\n        mapCopy[possiblePosition.row][possiblePosition.col] = \"o\";\r\n\r\n        const winner = getWinner(mapCopy);\r\n        if (winner === \"o\") {\r\n          // Attack that position\r\n          chosenOption = possiblePosition;\r\n        }\r\n      });\r\n\r\n      if (!chosenOption) {\r\n        // Defend\r\n        // Check if the opponent WINS if it takes one of the possible Positions\r\n        possiblePositions.forEach((possiblePosition) => {\r\n          const mapCopy = copyArray(map);\r\n\r\n          mapCopy[possiblePosition.row][possiblePosition.col] = \"x\";\r\n\r\n          const winner = getWinner(mapCopy);\r\n          if (winner === \"x\") {\r\n            // Defend that position\r\n            chosenOption = possiblePosition;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // choose random\r\n    if (!chosenOption) {\r\n      chosenOption =\r\n        possiblePositions[Math.floor(Math.random() * possiblePositions.length)];\r\n    }\r\n\r\n    if (chosenOption) {\r\n      onPress(chosenOption.row, chosenOption.col);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ImageBackground source={bg} style={styles.bg} resizeMode=\"contain\">\r\n        <Text\r\n          style={{\r\n            fontSize: 24,\r\n            color: \"white\",\r\n            position: \"absolute\",\r\n            top: 50,\r\n          }}\r\n        >\r\n          Current Turn: {currentTurn.toUpperCase()}\r\n        </Text>\r\n        <View style={styles.map}>\r\n          {map.map((row, rowIndex) => (\r\n            <View key={`row-${rowIndex}`} style={styles.row}>\r\n              {row.map((cell, columnIndex) => (\r\n                <Cell\r\n                  key={`row-${rowIndex}-col-${columnIndex}`}\r\n                  cell={cell}\r\n                  onPress={() => onPress(rowIndex, columnIndex)}\r\n                />\r\n              ))}\r\n            </View>\r\n          ))}\r\n        </View>\r\n\r\n        <View style={styles.buttons}>\r\n          <Text\r\n            onPress={() => setGameMode(\"LOCAL\")}\r\n            style={[\r\n              styles.button,\r\n              { backgroundColor: gameMode === \"LOCAL\" ? \"#4F5686\" : \"#191F24\" },\r\n            ]}\r\n          >\r\n            1v1\r\n          </Text>\r\n          <Text\r\n            onPress={() => setGameMode(\"BOT_EASY\")}\r\n            style={[\r\n              styles.button,\r\n              {\r\n                backgroundColor:\r\n                  gameMode === \"BOT_EASY\" ? \"#4F5686\" : \"#191F24\",\r\n              },\r\n            ]}\r\n          >\r\n            Easy Bot\r\n          </Text>\r\n          <Text\r\n            onPress={() => setGameMode(\"BOT_MEDIUM\")}\r\n            style={[\r\n              styles.button,\r\n              {\r\n                backgroundColor:\r\n                  gameMode === \"BOT_MEDIUM\" ? \"#4F5686\" : \"#191F24\",\r\n              },\r\n            ]}\r\n          >\r\n            Medium Bot\r\n          </Text>\r\n        </View>\r\n      </ImageBackground>\r\n\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#242D34\",\r\n  },\r\n  bg: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n\r\n    paddingTop: 15,\r\n  },\r\n  map: {\r\n    width: \"80%\",\r\n    aspectRatio: 1,\r\n  },\r\n  row: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  buttons: {\r\n    position: \"absolute\",\r\n    bottom: 50,\r\n    flexDirection: \"row\",\r\n  },\r\n  button: {\r\n    color: \"white\",\r\n    margin: 10,\r\n    fontSize: 16,\r\n    backgroundColor: \"#191F24\",\r\n    padding: 10,\r\n    paddingHorizontal: 15,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}